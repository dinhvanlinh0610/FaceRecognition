from qdrant_client import QdrantClient
from qdrant_client.http import models
from app.config import config
import uuid
import os
import time
from grpc import StatusCode
import sys

class QdrantService:
    def __init__(self):
        try:
            print("\n" + "="*80)
            print("üîÑ ƒêang k·∫øt n·ªëi ƒë·∫øn Qdrant server...")
            print(f"   - Host: {config.QDRANT_HOST}")
            print(f"   - Port: {config.QDRANT_PORT}")
            print("="*80 + "\n")
            
            self.client = QdrantClient(
                host=config.QDRANT_HOST,
                port=config.QDRANT_PORT,
                prefer_grpc=False,
                timeout=5.0
            )
            self.collection_name = config.QDRANT_COLLECTION
            self._ensure_collection()
        except Exception as e:
            print("\n" + "="*80)
            print("‚ùå L·ªñI: Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Qdrant server")
            print("="*80)
            print("Vui l√≤ng th·ª±c hi·ªán c√°c b∆∞·ªõc sau:")
            print("1. Ki·ªÉm tra xem Qdrant container ƒë√£ ch·∫°y ch∆∞a b·∫±ng l·ªánh:")
            print("   docker ps")
            print("2. N·∫øu ch∆∞a, kh·ªüi ƒë·ªông Qdrant server b·∫±ng l·ªánh:")
            print("   docker run -p 6333:6333 qdrant/qdrant")
            print("3. ƒê·ª£i kho·∫£ng 10 gi√¢y ƒë·ªÉ server kh·ªüi ƒë·ªông ho√†n t·∫•t")
            print("4. Ch·∫°y l·∫°i ch∆∞∆°ng tr√¨nh")
            print("="*80 + "\n")
            sys.exit(1)

    def _ensure_collection(self):
        max_retries = 3
        retry_delay = 2  # seconds
        
        for attempt in range(max_retries):
            try:
                print("\n" + "="*80)
                print("üîÑ ƒêang ki·ªÉm tra collection...")
                print("="*80 + "\n")
                
                # Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn server
                self.client.get_collections()
                
                # T·∫°o collection n·∫øu ch∆∞a t·ªìn t·∫°i
                collections = self.client.get_collections().collections
                collection_names = [collection.name for collection in collections]
                
                if self.collection_name not in collection_names:
                    print(f"üîÑ ƒêang t·∫°o collection '{self.collection_name}'...")
                    self.client.create_collection(
                        collection_name=self.collection_name,
                        vectors_config=models.VectorParams(size=128, distance=models.Distance.COSINE),
                    )
                    print(f"‚úÖ Collection '{self.collection_name}' ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng")
                else:
                    print(f"‚ÑπÔ∏è Collection '{self.collection_name}' ƒë√£ t·ªìn t·∫°i")
                return
                
            except Exception as e:
                if attempt < max_retries - 1:
                    print(f"‚ö†Ô∏è L·ªói k·∫øt n·ªëi ƒë·∫øn Qdrant server (l·∫ßn th·ª≠ {attempt + 1}/{max_retries}):")
                    print(f"   - L·ªói: {str(e)}")
                    print(f"   - ƒêang th·ª≠ l·∫°i sau {retry_delay} gi√¢y...")
                    time.sleep(retry_delay)
                else:
                    print("\n" + "="*80)
                    print("‚ùå L·ªñI: Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Qdrant server sau nhi·ªÅu l·∫ßn th·ª≠")
                    print("="*80)
                    print("Vui l√≤ng th·ª±c hi·ªán c√°c b∆∞·ªõc sau:")
                    print("1. Ki·ªÉm tra xem Qdrant container ƒë√£ ch·∫°y ch∆∞a b·∫±ng l·ªánh:")
                    print("   docker ps")
                    print("2. N·∫øu ch∆∞a, kh·ªüi ƒë·ªông Qdrant server b·∫±ng l·ªánh:")
                    print("   docker run -p 6333:6333 qdrant/qdrant")
                    print("3. ƒê·ª£i kho·∫£ng 10 gi√¢y ƒë·ªÉ server kh·ªüi ƒë·ªông ho√†n t·∫•t")
                    print("4. Ch·∫°y l·∫°i ch∆∞∆°ng tr√¨nh")
                    print("="*80 + "\n")
                    sys.exit(1)

    def add_user(self, name: str, face_encoding: list[float]) -> str:
        user_id = str(uuid.uuid4())
        try:
            print("\n" + "="*80)
            print(f"üîÑ ƒêang th√™m user {name}...")
            print(f"   - ID: {user_id}")
            print(f"   - Vector size: {len(face_encoding)}")
            print("="*80 + "\n")
            
            # Ki·ªÉm tra k·∫øt n·ªëi tr∆∞·ªõc khi th√™m
            try:
                self.client.get_collections()
            except Exception as e:
                print(f"‚ùå L·ªói k·∫øt n·ªëi ƒë·∫øn Qdrant: {str(e)}")
                raise
            
            # Th√™m user
            try:
                self.client.upsert(
                    collection_name=self.collection_name,
                    points=[
                        models.PointStruct(
                            id=user_id,
                            vector=face_encoding,
                            payload={"name": name}
                        )
                    ]
                )
            except Exception as e:
                print(f"‚ùå L·ªói khi upsert user: {str(e)}")
                raise
            
            # Ki·ªÉm tra xem user ƒë√£ ƒë∆∞·ª£c th√™m ch∆∞a
            try:
                search_result = self.client.search(
                    collection_name=self.collection_name,
                    query_vector=face_encoding,
                    limit=1
                )
            except Exception as e:
                print(f"‚ùå L·ªói khi t√¨m ki·∫øm user: {str(e)}")
                raise
            
            if search_result and search_result[0].id == user_id:
                print(f"‚úÖ ƒê√£ th√™m user {name} th√†nh c√¥ng v·ªõi ID: {user_id}")
                print(f"   - Collection: {self.collection_name}")
                print(f"   - Vector size: {len(face_encoding)}")
                print(f"   - Score: {search_result[0].score}")
            else:
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x√°c nh·∫≠n user {name} ƒë√£ ƒë∆∞·ª£c th√™m")
            
            return user_id
        except Exception as e:
            print(f"‚ùå L·ªói khi th√™m user: {str(e)}")
            raise e

    def delete_user(self, user_id: str) -> bool:
        try:
            print("\n" + "="*80)
            print(f"üîÑ ƒêang x√≥a user v·ªõi ID: {user_id}...")
            print("="*80 + "\n")
            
            self.client.delete(
                collection_name=self.collection_name,
                points_selector=models.PointIdsList(
                    points=[user_id]
                )
            )
            
            # Ki·ªÉm tra xem user ƒë√£ b·ªã x√≥a ch∆∞a
            try:
                self.client.retrieve(
                    collection_name=self.collection_name,
                    ids=[user_id]
                )
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x√°c nh·∫≠n user ƒë√£ b·ªã x√≥a")
                return False
            except Exception:
                print(f"‚úÖ ƒê√£ x√≥a user v·ªõi ID: {user_id} th√†nh c√¥ng")
                return True
        except Exception as e:
            print(f"‚ùå L·ªói khi x√≥a user: {str(e)}")
            return False

    def search_user(self, face_encoding: list[float]) -> dict:
        try:
            print("\n" + "="*80)
            print("üîÑ ƒêang t√¨m ki·∫øm user...")
            print("="*80 + "\n")
            
            search_result = self.client.search(
                collection_name=self.collection_name,
                query_vector=face_encoding,
                limit=1
            )
            
            if not search_result:
                print("‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y user ph√π h·ª£p")
                return None
            
            best_match = search_result[0]
            print(f"‚úÖ T√¨m th·∫•y user ph√π h·ª£p:")
            print(f"   - ID: {best_match.id}")
            print(f"   - T√™n: {best_match.payload['name']}")
            print(f"   - ƒê·ªô ch√≠nh x√°c: {best_match.score}")
            return {
                "user_id": best_match.id,
                "name": best_match.payload["name"],
                "score": best_match.score
            }
        except Exception as e:
            print(f"‚ùå L·ªói khi t√¨m ki·∫øm user: {str(e)}")
            raise e

    def list_users(self) -> list[dict]:
        try:
            print("\n" + "="*80)
            print("üîÑ ƒêang l·∫•y danh s√°ch users...")
            print("="*80 + "\n")
            
            # L·∫•y t·∫•t c·∫£ points t·ª´ collection
            points = self.client.scroll(
                collection_name=self.collection_name,
                limit=100,
                with_payload=True,
                with_vectors=True
            )[0]
            
            if not points:
                print("‚ÑπÔ∏è Kh√¥ng c√≥ user n√†o trong collection")
                return []
            
            users = []
            for point in points:
                try:
                    user = {
                        "user_id": str(point.id),
                        "name": point.payload.get("name", "Unknown"),
                        "face_encoding": point.vector
                    }
                    users.append(user)
                except Exception as e:
                    print(f"‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω point {point.id}: {str(e)}")
                    continue
            
            print(f"‚úÖ ƒê√£ l·∫•y danh s√°ch {len(users)} users")
            for user in users:
                print(f"   - {user['name']} (ID: {user['user_id']})")
            return users
        except Exception as e:
            print(f"‚ùå L·ªói khi l·∫•y danh s√°ch users: {str(e)}")
            raise e 